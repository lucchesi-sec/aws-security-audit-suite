name: Security CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scan

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,security]"
    
    - name: Code Quality - Black
      run: black --check --diff .
    
    - name: Code Quality - isort
      run: isort --check-only --diff .
    
    - name: Code Quality - flake8
      run: flake8 .
    
    - name: Type Checking - mypy
      run: mypy .
    
    - name: Security Scan - Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: Dependency Scan - Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Dependency Scan - pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit
    
    - name: Secret Scan - TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run Tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
          coverage.xml
          htmlcov/
    
    - name: Security Report Summary
      if: always()
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f bandit-report.json ]; then
          echo "**Bandit SAST Scan:** $(jq '.results | length' bandit-report.json) issues found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f safety-report.json ]; then
          echo "**Safety Dependency Scan:** $(jq '.vulnerabilities | length' safety-report.json) vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "See artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -e .
    
    - name: Check Licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --fail-on='GPL'
    
    - name: Upload License Report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json
